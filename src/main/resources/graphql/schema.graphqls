type Author {
  id: ID!
  firstName: String!
  lastName: String!
  birthDate: String
  country: String
  books: [Book!]!
}

type Publisher {
  id: ID!
  name: String!
  location: String
  books: [Book!]!
  origin: City!
}

type Book {
  id: ID!
  title: String!
  isbn: String
  year: Int
  author: Author!
  publisher: Publisher
}

type City {
  id: ID!
  name: String!
  publishers: [Publisher!]!
}

type Query {
  authors: [Author!]!
  author(id: ID!): Author
  publishers: [Publisher!]!
  publisher(id: ID!): Publisher
  publisherByBookId(id: ID!): Publisher
  publishersByOriginId(id: ID!): [Publisher]
  books: [Book!]!
  woAuthor: [Book]!
  book(id: ID!): Book
  booksByPublisherId(id: ID!): [Book]
}

input updateBookInput {
  title: String
  isbn: String
  year: Int
  author: ID
  publisher: ID
}

input createBookInput {
  title: String!
  isbn: String
  year: Int
  author: ID!
  publisher: ID
}

type Mutation {
  createBook(input: createBookInput!): Book!
  deleteBook(id: ID!): Boolean!
  updateBook(id: ID!, input: updateBookInput): Book!
  createAuthor(firstName: String!, lastName: String!, birthDate: String, country: String): Author!
  updateAuthor(id: ID!, firstName: String, lastName: String, birthDate: String, country: String): Author!
  deleteAuthor(id: ID!): Boolean!
  createPublisher(name: String!, location: String): Publisher!
  updatePublisher(id: ID!, name: String, location: String): Publisher!
  deletePublisher(id: ID!): Boolean!

}